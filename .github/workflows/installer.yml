name: Exiled.Installer CI

on: [push, pull_request]

jobs:
  build:
    name: .Net Core ${{ matrix.framework }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
        - os: ubuntu-latest
          target: linux-x64
          warp_target: linux-x64
        - os: windows-latest
          target: win-x64
          warp_target: windows-x64
    timeout-minutes: 30

    steps:
    - uses: actions/setup-dotnet@v1.5.0

    - uses: actions/checkout@v2.3.1

    - name: Download warp-packer
      shell: pwsh
      env:
        TARGET_RUNTIME: ${{ matrix.target }}
      run: |
        $TARGET_RUNTIME = "${{ env.TARGET_RUNTIME }}"
        switch ($TARGET_RUNTIME) {
          'linux-x64' {
            $TARGET_LINK = 'https://github.com/dgiagio/warp/releases/download/v0.3.0/linux-x64.warp-packer'
            Break
          }
          'win-x64' {
            $TARGET_LINK = 'https://github.com/dgiagio/warp/releases/download/v0.3.0/windows-x64.warp-packer.exe'
            Break
          }
          Default {
            Write-Host "Cannot resolve target runtime ${{ env.TARGET_RUNTIME }}"
            Exit 1
          }
        }

        $TARGET_FILE = $TARGET_LINK.Split('/')[-1]
        Write-Host "::set-env name=TARGET_FILE::$TARGET_FILE"
        Invoke-WebRequest -Uri $TARGET_LINK -OutFile $TARGET_FILE

    - name: Install dependencies for ${{ matrix.target }}
      run: dotnet restore Exiled.Installer -r ${{ matrix.target }}

    - name: Build ${{ matrix.target }}
      run: dotnet publish Exiled.Installer -r ${{ matrix.target }} -c release -o builds/${{ matrix.target }}

    - name: Upload ${{ matrix.target }} build
      uses: actions/upload-artifact@v2
      with:
        name: Exiled.Installer-${{ matrix.target }}
        path: builds/${{ matrix.target }}

    - name: Resolve program entry point
      shell: pwsh
      env:
        TARGET_RUNTIME: ${{ matrix.target }}
      run: |
        $TARGET_RUNTIME = "${{ env.TARGET_RUNTIME }}"
        switch ($TARGET_RUNTIME) {
          'linux-x64' {
            $ENTRY_POINT = 'Exiled.Installer'
            Break
          }
          'win-x64' {
            $ENTRY_POINT = 'Exiled.Installer.exe'
            Break
          }
          Default {
            Write-Host "Cannot resolve program entry point"
            Exit 1
          }
        }

        Write-Host "::set-env name=ENTRY_POINT::$ENTRY_POINT"

    - name: Packing with warp-packer
      run: ./${{ env.TARGET_FILE }} --arch ${{ matrix.warp_target }} --input_dir builds/${{ matrix.target }} --exec ${{ env.ENTRY_POINT }} --output ${{ env.ENTRY_POINT }}

    - name: Upload packed ${{ matrix.target }} build
      uses: actions/upload-artifact@v2
      with:
        name: Exiled.Installer-packed-${{ matrix.target }}
        path: ${{ env.ENTRY_POINT }}
