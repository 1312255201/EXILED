name: Release

on:
  push:
    tags:
      - "v*.*.*"


defaults:
  run:
    working-directory: ./EXILED

env:
  EXILED_REFERENCES_URL: https://misaka-zerotwo.github.io/SL-References/Dev.zip
  EXILED_REFERENCES_PATH: ${{ github.workspace }}/EXILED/References
  EXILED_DLL_ARCHIVER_URL: https://github.com/Exiled-Official/EXILED-DLL-Archiver/releases/latest/download/EXILED-DLL-Archiver.exe

jobs:
  build:
    permissions: write-all
    name: .Net Core ${{ matrix.framework }} on ${{ matrix.os }} for ${{ matrix.proj_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        proj_name: [Exiled.Installer]
        include:
        - os: ubuntu-latest
          target: linux-x64
        - os: windows-latest
          target: win-x64
    timeout-minutes: 30

    steps:
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
  
      - name: Setup Nuget
        uses: iRebbok/setup-nuget@master
  
      - uses: actions/checkout@v2.3.4
  
      - name: Get references
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri ${{ env.EXILED_REFERENCES_URL }} -OutFile ${{ github.workspace }}/EXILED/References.zip
          Expand-Archive -Path References.zip -DestinationPath ${{ env.EXILED_REFERENCES_PATH }}
  
      - name: Build
        if: runner.os == 'Windows'
        env:
          EXILED_REFERENCES: ${{ env.EXILED_REFERENCES_PATH }}
        shell: pwsh
        run: |
          ./build.ps1
          $File = (Get-ChildItem -Path . -Include 'EXILEDOFFICIAL.*.nupkg' -Recurse).Name
          Out-File -FilePath ${{ github.env }} -InputObject "PackageFile=$File" -Encoding utf-8 -Append
          
      - name: Get references
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri ${{ env.EXILED_DLL_ARCHIVER_URL }} -OutFile ${{ github.workspace }}/EXILED/EXILED-DLL-Archiver.exe
    
      - name: Packaging results as tar.gz
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./packaging.ps1

      - name: Install dependencies for ${{ matrix.proj_name }}@${{ matrix.target }}
        run: dotnet restore ${{ matrix.proj_name }} -r ${{ matrix.target }}
  
      - name: Build ${{ matrix.proj_name }}@${{ matrix.target }}
        run: dotnet publish ${{ matrix.proj_name }} -r ${{ matrix.target }} -c release -o builds/${{ matrix.target }} --self-contained true
        
      - name: Release
        if: runner.os == 'Windows'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            EXILED/bin/Release/Exiled.tar.gz
            EXILED/builds/win-x64/Exiled.Installer-Win.exe
      
      - name: Release
        if: runner.os == 'Linux'
        uses: softprops/action-gh-release@v2
        with:
          files: EXILED/builds/linux-x64/Exiled.Installer-Linux
